local status_ok, wk = pcall(require, "which-key")
if not status_ok then
	return
end

local mappings = {
	{ "<leader>a",  "<cmd>Alpha<cr>",                                                   desc = "Alpha" },
	{ "<leader>A",  "<cmd>ArgWrap<cr>",                                                 desc = "ArgWrap" },
	{ "<leader>e",  "<cmd>NvimTreeToggle<cr>",                                          desc = "Explorer" },
	{ "<leader>w",  "<cmd>w!<CR>",                                                      desc = "Save" },
	{ "<leader>Q",  "<cmd>q!<CR>",                                                      desc = "Quit" },
	{ "<leader>c",  "<cmd>Bdelete!<CR>",                                                desc = "Close Buffer" },
	{ "<leader>h",  "<cmd>nohlsearch<CR>",                                              desc = "No Highlight" },
	{ "<leader>P",  "<cmd>lua require('telescope').extensions.projects.projects()<cr>", desc = "Projects" },
	{ "<leader>pc", "<cmd>PackerCompile<cr>",                                           desc = "Compile" },
	{ "<leader>pi", "<cmd>PackerInstall<cr>",                                           desc = "Install" },
	{ "<leader>ps", "<cmd>PackerSync<cr>",                                              desc = "Sync" },
	{ "<leader>pS", "<cmd>PackerStatus<cr>",                                            desc = "Status" },
	{ "<leader>pu", "<cmd>PackerUpdate<cr>",                                            desc = "Update" },
	{ "<leader>la", "<cmd>lua vim.lsp.buf.code_action()<cr>",                           desc = "Code Action" },
	{ "<leader>ld", "<cmd>Telescope diagnostics bufnr=0<cr>",                           desc = "Document Diagnostics" },
	{ "<leader>lw", "<cmd>Telescope diagnostics<cr>",                                   desc = "Workspace Diagnostics" },
	{ "<leader>lf", "<cmd>lua vim.lsp.buf.format({ async = true })<cr>",                desc = "Format" },
	{ "<leader>li", "<cmd>Mason<cr>",                                                   desc = "Info" },
	{ "<leader>lj", "<cmd>lua vim.diagnostic.goto_next()<CR>",                          desc = "Next Diagnostic" },
	{ "<leader>lk", "<cmd>lua vim.diagnostic.goto_prev()<cr>",                          desc = "Prev Diagnostic" },
	{ "<leader>lr", "<cmd>lua vim.lsp.buf.rename()<cr>",                                desc = "Rename" },
	{ "<leader>ls", "<cmd>Telescope lsp_document_symbols<cr>",                          desc = "Document Symbols" },
	{ "<leader>lS", "<cmd>Telescope lsp_dynamic_workspace_symbols<cr>",                 desc = "Workspace Symbols" },
	{ "<leader>gg", "<cmd>lua _LAZYGIT_TOGGLE()<CR>",                                   desc = "Lazygit" },
	{ "<leader>gj", "<cmd>lua require 'gitsigns'.next_hunk()<cr>",                      desc = "Next Hunk" },
	{ "<leader>gk", "<cmd>lua require 'gitsigns'.prev_hunk()<cr>",                      desc = "Prev Hunk" },
	{ "<leader>gl", "<cmd>lua require 'gitsigns'.blame_line()<cr>",                     desc = "Blame" },
	{ "<leader>gp", "<cmd>lua require 'gitsigns'.preview_hunk()<cr>",                   desc = "Preview Hunk" },
	{ "<leader>gr", "<cmd>lua require 'gitsigns'.reset_hunk()<cr>",                     desc = "Reset Hunk" },
	{ "<leader>gR", "<cmd>lua require 'gitsigns'.reset_buffer()<cr>",                   desc = "Reset Buffer" },
	{ "<leader>gs", "<cmd>lua require 'gitsigns'.stage_hunk()<cr>",                     desc = "Stage Hunk" },
	{ "<leader>gu", "<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>",                desc = "Undo Stage Hunk" },
	{ "<leader>gd", "<cmd>Gitsigns diffthis HEAD<cr>",                                  desc = "Diff" },
	{ "<leader>gb", "<cmd>Telescope git_branches<cr>",                                  desc = "Checkout branch" },
	{ "<leader>go", "<cmd>Telescope git_status<cr>",                                    desc = "Open changed file" },
	{ "<leader>ff", "<cmd>Telescope find_files <CR>",                                   desc = "Find files" },
	{ "<leader>fF", "<cmd>Telescope live_grep <CR>",                                    desc = "Find files" },
	{ "<leader>fc", "<cmd>Telescope colorscheme<cr>",                                   desc = "Colorscheme" },
	{ "<leader>fh", "<cmd>Telescope help_tags<cr>",                                     desc = "Find Help" },
	{ "<leader>fM", "<cmd>Telescope oldfiles<cr>",                                      desc = "Open Recent File" },
	{ "<leader>fr", "<cmd>Telescope oldfiles<cr>",                                      desc = "Open Recent File" },
	{ "<leader>fR", "<cmd>Telescope registers<cr>",                                     desc = "Registers" },
	{ "<leader>fk", "<cmd>Telescope keymaps<cr>",                                       desc = "Keymaps" },
	{ "<leader>fC", "<cmd>Telescope commands<cr>",                                      desc = "Commands" },
	{ "<leader>fb", "<cmd>Telescope buffers<cr>",                                       desc = "Buffers" },
	{ "<leader>Tp", "<cmd>lua _PYTHON_TOGGLE()<cr>",                                    desc = "Python" },
	{ "<leader>Tf", "<cmd>ToggleTerm direction=float<cr>",                              desc = "Float" },
	{ "<leader>Th", "<cmd>ToggleTerm size=10 direction=horizontal<cr>",                 desc = "Horizontal" },
	{ "<leader>Tv", "<cmd>ToggleTerm size=80 direction=vertical<cr>",                   desc = "Vertical" },
}

wk.add(mappings)
