# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


# ----------------------------------------

# for docker
export DOCKER_HOST=tcp://0.0.0.0:2375
sudo mount --bind /mnt/c /c
sudo mount --bind /mnt/d /d

# for python
alias python='python3'
alias pip='pip3'
export WORKON_HOME=~/.virtualenvs
export VIRTUALENVWRAPPER_PYTHON='/usr/bin/python3'  # Usage of python3
source ~/.local/bin/virtualenvwrapper.sh 

# for pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"

export NVM_DIR="$HOME/.nvm"
 [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
 [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
 
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"

# added by travis gem
[ -f /home/hidekuma/.travis/travis.sh ] && source /home/hidekuma/.travis/travis.sh

# for anaconda
export PATH="~/.pyenv/versions/miniconda3-latest/bin/:$PATH"

# for matplotlib
export DISPLAY=':0'

if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/hidekuma/.pyenv/versions/miniconda3-latest/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/hidekuma/.pyenv/versions/miniconda3-latest/etc/profile.d/conda.sh" ]; then
        . "/home/hidekuma/.pyenv/versions/miniconda3-latest/etc/profile.d/conda.sh"
    else
        export PATH="/home/hidekuma/.pyenv/versions/miniconda3-latest/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# ---------- alias -----------
# for vim
alias vi='vim'

# basic
alias ll='ls -al'
alias l='clear && ls -al'
alias cdd='cd /d/'
alias ws='cd /d/workspace'
alias solup='cd /d/workspace/solup'
alias echost='cd /d/workspace/solup/echost'
alias 12r='cd /d/workspace/solup/12r'
alias private='cd /d/workspace/private'
alias ..='cd ..'
alias ..2='.. && ..'
alias ..3='..2 && ..'

# dkr
alias dkr='docker'
alias dkrp='docker-compose'

# for git
alias gst='git status'
alias gc='git commit'
alias gm='git merge'
alias ga='git add'
alias gaa='git add --all'
alias gloga='git log --oneline --decorate --color --graph --all'
alias glog='git log --oneline --decorate --color --graph'
alias gco='git checkout'
alias gb='git branch'
alias gp='git push'
alias gf='git fetch'
alias gl='git pull'
alias gd='git diff'

# for tmux
alias tat='tmux attach'
alias tls='tmux ls' 

# for ctags
alias ctagsphp='ctags -R --fields=+aimlS --languages=php'
alias ctagspy="ctags -R --fields=+l --languages=python --python-kinds=-iv -f ./tags . $(python -c "import os, sys; print(' '.join('{}'.format(d) for d in sys.path if os.path.isdir(d)))")"

# for anaconda
alias condaa='conda activate'
alias condad='conda deactivate'

# for ssh reset ect
alias rect='ssh-keygen -R ectlocal.cafe24.com'

# lzd
alias lzd='lazydocker'
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# for fzf search
# Search a file with fzf inside a Tmux pane and then open it in an editor
fzf_then_open_in_editor() {
  local file=$(fzf-tmux)
  # Open the file if it exists
  if [ -n "$file" ]; then
    # Use the default editor if it's defined, otherwise Vim
    ${EDITOR:-vim} "$file"
  fi
}
bind -x '"\C-t": fzf_then_open_in_editor'

condad
# ------------------------------------- 
echo '''
╦ ╦╦╔╦╗╔═╗╦╔═╦ ╦╔╦╗╔═╗
╠═╣║ ║║║╣ ╠╩╗║ ║║║║╠═╣
╩ ╩╩═╩╝╚═╝╩ ╩╚═╝╩ ╩╩ ╩
'''
